#!/usr/bin/env node
var exec = require('child_process').execFileSync;
var path = require('path');
var fs = require('fs');
var treefs = require('../../lib/fs.js');

var args = process.argv;
args.shift();  // Node executable
args.shift();  // This script

var printDiff = false;  // Whether to print the diff on stderr.
if (args[0] === '--diff') {
  printDiff = true;
  args.shift();
}
var pathFilter = new RegExp();
if (args[0] === '--filter') {
  args.shift();
  try {
    var filter = args.shift();
    if (filter[0] !== '/') {
      console.log("Path filter must start from the root");
      process.exit(0);
    }
    var filterRegex = '^(' + filter.split('/').slice(1)
    .map(function(elt, idx, arr) {
      var unescaped = '/' + arr.slice(0, idx + 1).join('/');
      var escaped = unescaped.replace(/([\.\\\/\?\+])/g, '\\$1');
      return escaped.replace(/\*/g, '[^/]+');
    }).join('|') + ')$';
    pathFilter = new RegExp(filterRegex);
  } catch (e) {
    console.log("Invalid path filter");
    process.exit(0);
  }
}
var metaFile = args[0];

if (!metaFile) {
  console.log("Print an updated metadata file with files seen on the drive,");
  console.log("and excluding files not seen on the drive.");
  console.log("Usage: ./tools/meta/rebuild [--diff] [--filter PATH] metadata.json");
  console.log();
  console.log("  --diff: only show what changes would be made");
  console.log("  --filter PATH: update metadata for files matching PATH");
  console.log("                 * for globbing, [] for char selection");
  process.exit(1);
}

try {
  var metadata = JSON.parse(fs.readFileSync(metaFile));
} catch(e) {
  console.error(`Could not open ${metaFile}: ${e.message}`);
  process.exit(0);
}

function checkFile(file, vpath) {
  var promises = [];
  file.meta = file.meta || {};
  var realPath = treefs.realFromVirtual(vpath);
  try {
    var stat = fs.statSync(realPath);
    // If the path failed, ignore it.
  } catch(e) { return Promise.resolve(); }
  if (stat.isFile()) {
    if (file.meta.type === 'folder' || file.meta.type === undefined) {
      promises.push(treefs.guessType(vpath)
        .then(function(type) { file.meta.type = type; })
        .catch(console.error));
    }
  } else if (stat.isDirectory()) {
    file.meta.type = 'folder';
    file.files = file.files || {};
    var subfiles = fs.readdirSync(realPath);
    // Remove files that are not on disk.
    for (var metaSubfile in file.files) {
      var subfileName = vpath + '/' + metaSubfile;
      if (subfiles.indexOf(metaSubfile) === -1 && pathFilter.test(subfileName)) {
        if (printDiff) { console.log('- ' + subfileName); }
        delete file.files[metaSubfile];
      }
    };
    // Add files that are on disk.
    subfiles.forEach(function(subfile) {
      var subfileName = vpath + '/' + subfile;
      if (file.files[subfile] === undefined && pathFilter.test(subfileName)) {
        if (printDiff) { console.log('+ ' + subfileName); }
        file.files[subfile] = {};
      }
    });
  }

  // Remove me: set old metadata information.
  try {
    var oldMetaPath = './plugs/meta' + vpath;
    if (file.meta.type === 'folder') {
      oldMetaPath += '/.DS-Store';
    }
    var oldMeta = JSON.parse('' + fs.readFileSync(oldMetaPath));
    if (oldMeta.plug !== undefined) {
      if (oldMeta.plug === 'none') { file.meta.app = 'data'; }
      else { file.meta.app = oldMeta.plug; }
    }
    if (file.meta.type === 'binary' && oldMeta.type !== 'binary') { file.meta.type = oldMeta.type; }
  } catch(e) {}

  if (file.meta.modified === undefined) {
    file.meta.modified = (stat.mtime || new Date()).toISOString();
  }
  if (file.meta.updated === undefined) {
    file.meta.updated = (stat.ctime || file.meta.modified).toISOString();
  }

  for (var filename in file.files) {
    promises.push(checkFile(file.files[filename], vpath + '/' + filename));
  }
  return Promise.all(promises);
}

checkFile(metadata, '')
.then(function() {
  if (!printDiff) {
    console.log(JSON.stringify(metadata));
  }
})
.catch(console.error);
